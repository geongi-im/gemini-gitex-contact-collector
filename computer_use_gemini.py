#!/usr/bin/env python3
"""
Gemini 2.5 Computer Use ÏóêÏù¥Ï†ÑÌä∏
Ïã§Ï†ú ÎèôÏûëÌïòÎäî ÏôÑÎ≤ΩÌïú Íµ¨ÌòÑ (ÏµúÏã† Î≤ÑÏ†Ñ)
"""

import os
import time
import re
import json
from typing import Optional, Dict, Any, List, Tuple
from dotenv import load_dotenv
from google import genai
from google.genai import types
from google.genai.types import Content, Part, FunctionResponse, FunctionResponsePart
from playwright.sync_api import sync_playwright

# .env ÌååÏùº Î°úÎìú
load_dotenv()

class ComputerUseAgent:
    def __init__(self, api_key: Optional[str] = None, headless: bool = True):
        """Computer Use ÏóêÏù¥Ï†ÑÌä∏ Ï¥àÍ∏∞Ìôî"""
        self.api_key = api_key or os.getenv("GEMINI_API_KEY")
        if not self.api_key:
            raise ValueError("GEMINI_API_KEY ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")

        # GenAI ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî
        self.client = genai.Client(api_key=self.api_key)

        # ÌôîÎ©¥ ÌÅ¨Í∏∞ ÏÑ§Ï†ï
        self.screen_width = 1440
        self.screen_height = 900

        # Playwright ÏÑ§Ï†ï
        self.headless = headless
        self.playwright = None
        self.browser = None
        self.context = None
        self.page = None

        # Computer Use Î™®Îç∏ ÏÑ§Ï†ï
        self.model_name = 'gemini-2.5-computer-use-preview-10-2025'

    def start_browser(self):
        """Î∏åÎùºÏö∞Ï†Ä ÏãúÏûë"""
        print("üåê Î∏åÎùºÏö∞Ï†ÄÎ•º ÏãúÏûëÌï©ÎãàÎã§...")
        self.playwright = sync_playwright().start()
        self.browser = self.playwright.chromium.launch(headless=self.headless)
        self.context = self.browser.new_context(
            viewport={"width": self.screen_width, "height": self.screen_height}
        )
        self.page = self.context.new_page()
        print("‚úÖ Î∏åÎùºÏö∞Ï†ÄÍ∞Ä ÏãúÏûëÎêòÏóàÏäµÎãàÎã§.")

    def close_browser(self):
        """Î∏åÎùºÏö∞Ï†Ä Îã´Í∏∞"""
        if self.browser:
            print("üåê Î∏åÎùºÏö∞Ï†ÄÎ•º Îã´ÏäµÎãàÎã§...")
            self.browser.close()
        if self.playwright:
            self.playwright.stop()
        print("‚úÖ Î∏åÎùºÏö∞Ï†ÄÍ∞Ä Îã´ÌòîÏäµÎãàÎã§.")

    def take_screenshot(self) -> bytes:
        """ÌòÑÏû¨ ÌôîÎ©¥ Ïä§ÌÅ¨Î¶∞ÏÉ∑ Ï∞çÍ∏∞"""
        if not self.page:
            raise ValueError("Î∏åÎùºÏö∞Ï†ÄÍ∞Ä ÏãúÏûëÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
        return self.page.screenshot(type="png")

    def denormalize_x(self, x: int) -> int:
        """Ï†ïÍ∑úÌôîÎêú x Ï¢åÌëúÎ•º Ïã§Ï†ú ÌîΩÏÖÄ Ï¢åÌëúÎ°ú Î≥ÄÌôò"""
        return int(x / 1000 * self.screen_width)

    def denormalize_y(self, y: int) -> int:
        """Ï†ïÍ∑úÌôîÎêú y Ï¢åÌëúÎ•º Ïã§Ï†ú ÌîΩÏÖÄ Ï¢åÌëúÎ°ú Î≥ÄÌôò"""
        return int(y / 1000 * self.screen_height)

    def execute_javascript(self, code: str):
        """ÏûêÎ∞îÏä§ÌÅ¨Î¶ΩÌä∏ Ìï®Ïàò Ïã§ÌñâÌïòÎäî custom tool Ìï®Ïàò"""  
        return self.page.evaluate(code)

    def create_computer_use_config(self) -> genai.types.GenerateContentConfig:
        """Computer Use ÏÑ§Ï†ï ÏÉùÏÑ±"""
        custom_functions = [
            types.FunctionDeclaration.from_callable(  
                client=self.client, callable=self.execute_javascript  
            )  
        ]

        return genai.types.GenerateContentConfig(
            tools=[
                types.Tool(
                    computer_use=types.ComputerUse(
                        environment=types.Environment.ENVIRONMENT_BROWSER,
                    )
                ),
                types.Tool(
                    function_declarations=custom_functions,
                ),
            ]
        )

    def execute_function_calls(self, candidate) -> Tuple[List[Tuple[str, Dict[str, Any]]], Dict[str, bool]]:
        """Function Call Ïã§Ìñâ"""
        results = []
        function_calls = []
        safety_acknowledgements = {}

        # Function Call Ï∂îÏ∂ú
        for part in candidate.content.parts:
            if hasattr(part, 'function_call') and part.function_call:
                function_calls.append(part.function_call)

        for function_call in function_calls:
            action_result = {}
            fname = function_call.name
            args = function_call.args
            extra_fields = {}

            print(f"  üîß Ïã§Ìñâ Ï§ë: {fname}")
            print(f"  üìã Ïù∏Ïûê: {args}")

            # Safety decision ÌôïÏù∏
            if 'safety_decision' in args:
                decision = self.get_safety_confirmation(args['safety_decision'])
                if decision == "TERMINATE":
                    print("üõë ÏóêÏù¥Ï†ÑÌä∏ Î£®ÌîÑÎ•º Ï¢ÖÎ£åÌï©ÎãàÎã§.")
                    break
                extra_fields["safety_acknowledgement"] = "true"
                safety_acknowledgements[fname] = True

            try:
                if fname == "open_web_browser":
                    action_result = {"success": True, "message": "Î∏åÎùºÏö∞Ï†ÄÍ∞Ä Ïù¥ÎØ∏ Ïó¥Î†§ ÏûàÏäµÎãàÎã§."}

                elif fname == "click_at":
                    x = self.denormalize_x(args["x"])
                    y = self.denormalize_y(args["y"])
                    self.page.mouse.click(x, y)
                    action_result = {"success": True, "message": f"Ï¢åÌëú ({x}, {y})ÏóêÏÑú ÌÅ¥Î¶≠ÌñàÏäµÎãàÎã§."}

                elif fname == "type_text_at":
                    x = self.denormalize_x(args["x"])
                    y = self.denormalize_y(args["y"])
                    text = args["text"]
                    press_enter = args.get("press_enter", False)
                    clear_before_typing = args.get("clear_before_typing", True)

                    self.page.mouse.click(x, y)
                    time.sleep(0.1)

                    # ÌÖçÏä§Ìä∏ ÌïÑÎìú ÏßÄÏö∞Í∏∞
                    if clear_before_typing:
                        self.page.keyboard.press("Meta+A")
                        self.page.keyboard.press("Backspace")

                    # ÌÖçÏä§Ìä∏ ÏûÖÎ†•
                    # self.page.keyboard.type(text)
                    for char in text:  
                        self.page.keyboard.press(char)  
                        time.sleep(0.05)  # ÏßßÏùÄ ÎîúÎ†àÏù¥ Ï∂îÍ∞Ä

                    if press_enter:
                        self.page.keyboard.press("Enter")

                    action_result = {"success": True, "message": f"Ï¢åÌëú ({x}, {y})Ïóê ÌÖçÏä§Ìä∏Î•º ÏûÖÎ†•ÌñàÏäµÎãàÎã§: {text}"}

                elif fname == "navigate":
                    url = args["url"]
                    self.page.goto(url)
                    action_result = {"success": True, "message": f"{url}Î°ú Ïù¥ÎèôÌñàÏäµÎãàÎã§."}

                elif fname == "search":
                    self.page.goto("https://www.google.com")
                    action_result = {"success": True, "message": "Google Í≤ÄÏÉâ ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌñàÏäµÎãàÎã§."}

                elif fname == "scroll_document":
                    direction = args.get("direction", "down")
                    if direction == "down":
                        self.page.keyboard.press("PageDown")
                    elif direction == "up":
                        self.page.keyboard.press("PageUp")
                    elif direction == "left":
                        self.page.keyboard.press("ArrowLeft")
                    elif direction == "right":
                        self.page.keyboard.press("ArrowRight")
                    action_result = {"success": True, "message": f"Î¨∏ÏÑúÎ•º {direction} Î∞©Ìñ•ÏúºÎ°ú Ïä§ÌÅ¨Î°§ÌñàÏäµÎãàÎã§."}

                elif fname == "wait_5_seconds":
                    time.sleep(5)
                    action_result = {"success": True, "message": "5Ï¥à ÎåÄÍ∏∞ÌñàÏäµÎãàÎã§."}

                elif fname == "execute_javascript":  
                    self.execute_javascript(code=args["code"])
                    action_result = {"success": True, "message": f"ÏûêÎ∞îÏä§ÌÅ¨Î¶ΩÌä∏Î•º Ïã§ÌñâÌñàÏäµÎãàÎã§: {args['code']}"}

                else:
                    action_result = {"success": False, "message": f"ÏßÄÏõêÎêòÏßÄ ÏïäÎäî Ïï°ÏÖò: {fname}"}

                # Safety acknowledgment Ï∂îÍ∞Ä
                action_result.update(extra_fields)

                # ÎåÄÍ∏∞ Î∞è Î°úÎî©
                print(f"  ‚è≥ ÌéòÏù¥ÏßÄ Î°úÎî© ÎåÄÍ∏∞ Ï§ë...")
                self.page.wait_for_load_state(timeout=5000)
                time.sleep(1)
                print(f"  ‚úÖ Ïï°ÏÖò ÏôÑÎ£å: {action_result.get('message', 'ÏÑ±Í≥µ')}")

            except Exception as e:
                print(f"  ‚ùå Ïò§Î•ò Î∞úÏÉù {fname}: {e}")
                action_result = {"error": str(e)}

            results.append((fname, action_result))

        return results, safety_acknowledgements

    def get_safety_confirmation(self, safety_decision: Dict[str, Any]) -> str:
        """Safety ÌôïÏù∏ - ÏûêÎèôÏúºÎ°ú Í≥ÑÏÜç ÏßÑÌñâ"""
        print(f"‚ö†Ô∏è Safety decision Í∞êÏßÄ: {safety_decision.get('explanation', '')} -> ÏûêÎèô ÏäπÏù∏")
        return "CONTINUE"

    def get_function_responses(self, results: List[Tuple[str, Dict[str, Any]]],
                             safety_acknowledgements: Dict[str, bool] = None) -> List[FunctionResponse]:
        """Function Response ÏÉùÏÑ±"""
        screenshot_bytes = self.page.screenshot(type="png")
        current_url = self.page.url
        function_responses = []

        if safety_acknowledgements is None:
            safety_acknowledgements = {}

        for name, result in results:
            response_data = {"url": current_url}
            response_data.update(result)

            # Safety acknowledgment Ï∂îÍ∞Ä
            if name in safety_acknowledgements and safety_acknowledgements[name]:
                response_data["safety_acknowledgement"] = "true"

            function_responses.append(
                FunctionResponse(
                    name=name,
                    response=response_data,
                    parts=[
                        FunctionResponsePart(
                            inline_data=types.FunctionResponseBlob(
                                mime_type="image/png",
                                data=screenshot_bytes
                            )
                        )
                    ]
                )
            )

        return function_responses

    def has_function_calls(self, candidate) -> bool:
        """Function CallÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏"""
        return any(hasattr(part, 'function_call') and part.function_call
                  for part in candidate.content.parts)

    def extract_json_from_response(self, text: str) -> Optional[Dict]:
        """ÏùëÎãµ ÌÖçÏä§Ìä∏ÏóêÏÑú JSON Ï∂îÏ∂ú"""
        # 1. ÎßàÌÅ¨Îã§Ïö¥ ÏΩîÎìúÎ∏îÎ°ù ÎÇ¥ JSON Ï∞æÍ∏∞
        code_block_pattern = r'```(?:json)?\s*\n(.*?)\n```'
        matches = re.findall(code_block_pattern, text, re.DOTALL)

        for match in matches:
            try:
                return json.loads(match.strip())
            except json.JSONDecodeError:
                continue

        # 2. Ïù∏ÎùºÏù∏ JSON Í∞ùÏ≤¥ Ï∞æÍ∏∞
        json_pattern = r'\{[^\{\}]*(?:"[^"]*"[^\{\}]*:[^\{\}]*)+[^\{\}]*\}'
        matches = re.findall(json_pattern, text, re.DOTALL)

        for match in matches:
            try:
                return json.loads(match)
            except json.JSONDecodeError:
                continue

        # 3. Ï†ÑÏ≤¥ ÌÖçÏä§Ìä∏Î•º JSONÏúºÎ°ú ÏãúÎèÑ
        try:
            return json.loads(text.strip())
        except json.JSONDecodeError:
            pass

        return None

    def run_task(self, task: str, url: str = None, max_turns: int = 10) -> Optional[Dict]:
        """Computer Use ÏûëÏóÖ Ïã§Ìñâ Î∞è JSON Í≤∞Í≥º Î∞òÌôò"""
        try:
            self.start_browser()

            # Ï¥àÍ∏∞ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
            if url:
                self.page.goto(url)
            else:
                self.page.goto("https://www.google.com")

            # Ï¥àÍ∏∞ Ïä§ÌÅ¨Î¶∞ÏÉ∑
            screenshot = self.take_screenshot()

            # Computer Use ÏÑ§Ï†ï
            config = self.create_computer_use_config()

            # ÎåÄÌôî Í∏∞Î°ù Ï¥àÍ∏∞Ìôî (JSON ÏùëÎãµ Í∞ïÏ†ú)
            contents = [
                Content(
                    role="user",
                    parts=[
                        Part(text=f"""ÎãπÏã†ÏùÄ Ïú†Îä•Ìïú AI Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ÏûÖÎãàÎã§.

ÏûëÏóÖ: {task}

Ï§ëÏöî: ÏûëÏóÖ ÏôÑÎ£å ÌõÑ ÏùëÎãµÏùÄ Î∞òÎìúÏãú ÏàúÏàò JSON ÌòïÏãùÎßå Ï∂úÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.
ÏÑ§Î™ÖÏù¥ÎÇò ÎßàÌÅ¨Îã§Ïö¥ ÏΩîÎìúÎ∏îÎ°ù ÏóÜÏù¥ Ïò§ÏßÅ JSON Í∞ùÏ≤¥Îßå Ï∂úÎ†•ÌïòÏÑ∏Ïöî.
ÏòàÏãú: {{"contact_email": "example@example.com", "contact_call": "+123456789"}}"""),
                        Part.from_bytes(data=screenshot, mime_type='image/png')
                    ]
                )
            ]

            print(f"üéØ ÏûëÏóÖ ÏãúÏûë: {task}")

            text_response = None

            # ÏóêÏù¥Ï†ÑÌä∏ Î£®ÌîÑ
            for turn in range(max_turns):
                print(f"\n--- ÌÑ¥ {turn + 1} ---")
                print("ÏÉùÍ∞Å Ï§ë...")

                # Î™®Îç∏Ïóê ÏöîÏ≤≠ Î≥¥ÎÇ¥Í∏∞
                response = self.client.models.generate_content(
                    model=self.model_name,
                    contents=contents,
                    config=config,
                )

                candidate = response.candidates[0]
                contents.append(candidate.content)

                # GeminiÏùò ÏùëÎãµ ÌÖçÏä§Ìä∏ Ï∂úÎ†•
                response_text = " ".join([part.text for part in candidate.content.parts if hasattr(part, 'text') and part.text])
                if response_text:
                    print(f"ü§ñ Gemini ÏùëÎãµ: {response_text[:200]}{'...' if len(response_text) > 200 else ''}")

                # Function CallÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
                if not self.has_function_calls(candidate):
                    # ÏµúÏ¢Ö ÏùëÎãµ
                    text_response = response_text
                    print(f"üéØ ÏûëÏóÖ ÏôÑÎ£å! ÏµúÏ¢Ö ÏùëÎãµ: {text_response}")
                    break

                print("‚ö° Ïï°ÏÖò Ïã§Ìñâ Ï§ë...")
                results, safety_acknowledgements = self.execute_function_calls(candidate)

                print("üìä Ïã§Ìñâ Í≤∞Í≥º Ï≤òÎ¶¨ Ï§ë...")
                function_responses = self.get_function_responses(results, safety_acknowledgements)

                # Function ResponseÎ•º ÎåÄÌôî Í∏∞Î°ùÏóê Ï∂îÍ∞Ä
                contents.append(
                    Content(
                        role="user",
                        parts=[Part(function_response=fr) for fr in function_responses]
                    )
                )

                if turn == max_turns - 1:
                    print("‚ö†Ô∏è ÏµúÎåÄ ÌÑ¥ ÏàòÏóê ÎèÑÎã¨ÌñàÏäµÎãàÎã§.")

            # JSON Ï∂îÏ∂ú ÏãúÎèÑ
            if text_response:
                print(f"\nüîç JSON Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú ÏãúÎèÑ Ï§ë...")
                print(f"üìù ÏõêÎ≥∏ ÏùëÎãµ: {text_response}")
                extracted_json = self.extract_json_from_response(text_response)
                if extracted_json:
                    print(f"‚úÖ JSON Ï∂îÏ∂ú ÏÑ±Í≥µ!")
                    print(f"üìä Ï∂îÏ∂úÎêú Îç∞Ïù¥ÌÑ∞: {extracted_json}")
                    return extracted_json
                else:
                    print("‚ö†Ô∏è JSON Ï∂îÏ∂ú Ïã§Ìå® - Íµ¨Ï°∞ÌôîÎêú Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§")
                    return None
            else:
                print("‚ö†Ô∏è ÏµúÏ¢Ö ÌÖçÏä§Ìä∏ ÏùëÎãµÏù¥ ÏóÜÏäµÎãàÎã§")
                return None

        except Exception as e:
            print(f"‚ùå ÏûëÏóÖ Ïã§Ìñâ Ï§ë Ïò§Î•ò Î∞úÏÉù: {str(e)}")
            return None
        finally:
            self.close_browser()

def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    agent = ComputerUseAgent(headless=False)  # ÎîîÎ≤ÑÍπÖÏùÑ ÏúÑÌï¥ headless=False

    # ÏòàÏ†ú ÏûëÏóÖ Ïã§Ìñâ
    agent.run_task(
        #task=f"""document.getElementById('chkUseMyKD1').click(); ÏûêÎ∞îÏä§ÌÅ¨Î¶ΩÌä∏ Ìï®Ïàò Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî""",
        #url="https://highbuff.com/company",


        task=f"""
        1) Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÍ∞Ä ÏºúÏßÄÎ©¥ [ÌÇ§Î≥¥ÎìúÎ≥¥ÏïàÏÇ¨Ïö©] Ï≤¥ÌÅ¨Î∞ïÏä§Î•º ÌÅ¥Î¶≠Ìï¥ÏÑú ÌÇ§Î≥¥ÎìúÎ≥¥ÏïàÏùÑ Ìï¥Ï†úÌï¥Ï£ºÏÑ∏Ïöî.
        2) Î°úÍ∑∏Ïù∏ÎûÄÏóê ÏïÑÏù¥Îîî **highbuff** ÎπÑÎ∞ÄÎ≤àÌò∏ **Com12!@** Í≥µÎèôÏù∏Ï¶ùÏÑú ÎπÑÎ∞ÄÎ≤àÌò∏ **Comcom12!@**Î•º ÏûÖÎ†•ÌïòÍ≥† Î°úÍ∑∏Ïù∏ Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠Ìï©ÎãàÎã§
        3) Î°úÍ∑∏Ïù∏Ïù¥ ÏôÑÎ£åÎêòÎ©¥ Ïù¥Ï≤¥ ÌéòÏù¥ÏßÄ Ï§ëÎã® [Í≥ÑÏ¢åÎπÑÎ∞ÄÎ≤àÌò∏] ÌÖçÏä§Ìä∏ ÏûÖÎ†•ÎûÄÏóê **8091** Ïù¥ÎùºÎäî ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï©ÎãàÎã§.
        4) [Ïù¥Ï≤¥Í∏àÏï°] ÌÖçÏä§Ìä∏ ÏûÖÎ†•ÎûÄÏóêÎäî **1000**ÏõêÏùÑ ÏûÖÎ†•Ìï©ÎãàÎã§.
        5) Î∏åÎùºÏö∞Ï†Ä Ï∞ΩÏóêÏÑú **javascript:selectBank('004', 'Íµ≠ÎØº');** ÏûêÎ∞îÏä§ÌÅ¨Î¶ΩÌä∏ Ìï®ÏàòÎ•º Ïã§ÌñâÏãúÌÇµÎãàÎã§.
        6) [Í∏àÏúµÍ∏∞Í¥Ä] ÌÖçÏä§Ìä∏ ÏûÖÎ†•ÎûÄÏóêÎäî **Íµ≠ÎØº** Ïù¥ ÏûÖÎ†•ÎêòÏóàÎäîÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§.
        7) [ÏûÖÍ∏àÍ≥ÑÏ¢åÎ≤àÌò∏] ÏòÅÏó≠Ïóê Í≥ÑÏ¢åÎ≤àÌò∏ÎûÄÏóêÎäî **94071273750** ÏùÑ ÏûÖÎ†•ÌïòÍ≥† [Ï°∞Ìöå] Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠Ìï©ÎãàÎã§.
        8) [Ï°∞Ìöå] Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÎ©¥ ÏòàÍ∏àÏ£º Ïù¥Î¶ÑÏù¥ ÎÖ∏Ï∂úÎêòÎäîÎç∞ **ÏûÑÍ±¥Í∏∞**ÏôÄ ÏùºÏπòÌïúÏßÄ ÎπÑÍµêÌï©ÎãàÎã§. ÏùºÏπòÌïòÏßÄÏïäÏúºÎ©¥ ÏóêÎü¨Î©îÏãúÏßÄÎ•º ÎÖ∏Ï∂úÌïòÍ≥† ÏûëÏóÖÏùÑ Ï§ëÎã®Ìï©ÎãàÎã§.
        9) Ïù¥ÏÉÅÏù¥ ÏóÜÎã§Î©¥ [Î∞õÎäîÎ∂ÑÌÜµÏû•ÌëúÏãúÎÇ¥Ïö©] ÌÖçÏä§Ìä∏ ÏûÖÎ†•ÎûÄÏóêÎäî **ÌïòÏù¥Î≤ÑÌîÑ** ÏûÖÎ†•ÌûôÎãàÎã§.
        10) Ïö∞Ï∏° ÌïòÎã®Ïóê [Ïù¥Ï≤¥Ïã§Ìñâ] Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÎ©¥ Îã§Ïùå ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.
        11) ÏûÖÎ†•Îêú Ï†ïÎ≥¥Í∞Ä ÎßûÎäîÏßÄ ÌôïÏù∏ÌïòÍ≥† [Ïã§Î¨ºOTPÎ≤àÌò∏ÏûÖÎ†•] ÌÖçÏä§Ìä∏ÏûÖÎ†•ÎûÄÏóê **123456** ÏûÖÎ†•Ìï©ÎãàÎã§.
        12) Ïö∞Ï∏° ÌïòÎã®Ïóê [Îã§Ïùå] Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠Ìï©ÎãàÎã§. """,
        url="https://www.daishin.com/g.ds?p=90&v=73&m=139&returnUrl=%2Fg.ds%3Fm%3D162%26p%3D383%26v%3D228",
        max_turns=30
    )

if __name__ == "__main__":
    main()